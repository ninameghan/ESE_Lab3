;buildInfoPackage: chisel3, version: 3.3.1, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit Tile : 
  module Control : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcode : UInt<7>, branch : UInt<1>, pcfromalu : UInt<1>, jump : UInt<1>, memread : UInt<1>, memwrite : UInt<1>, regwrite : UInt<1>, toreg : UInt<1>, resultselect : UInt<2>, alusrc : UInt<1>, pcadd : UInt<1>, itype : UInt<1>, aluop : UInt<2>, validinst : UInt<1>}
    
    node _T = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_1 = eq(UInt<6>("h033"), _T) @[Lookup.scala 31:38]
    node _T_2 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_3 = eq(UInt<5>("h013"), _T_2) @[Lookup.scala 31:38]
    node _T_4 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_5 = eq(UInt<2>("h03"), _T_4) @[Lookup.scala 31:38]
    node _T_6 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_7 = eq(UInt<6>("h023"), _T_6) @[Lookup.scala 31:38]
    node _T_8 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_9 = eq(UInt<7>("h063"), _T_8) @[Lookup.scala 31:38]
    node _T_10 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_11 = eq(UInt<6>("h037"), _T_10) @[Lookup.scala 31:38]
    node _T_12 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_13 = eq(UInt<5>("h017"), _T_12) @[Lookup.scala 31:38]
    node _T_14 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_15 = eq(UInt<7>("h06f"), _T_14) @[Lookup.scala 31:38]
    node _T_16 = and(io.opcode, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_17 = eq(UInt<7>("h067"), _T_16) @[Lookup.scala 31:38]
    node _T_18 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_19 = mux(_T_15, UInt<1>("h00"), _T_18) @[Lookup.scala 33:37]
    node _T_20 = mux(_T_13, UInt<1>("h00"), _T_19) @[Lookup.scala 33:37]
    node _T_21 = mux(_T_11, UInt<1>("h00"), _T_20) @[Lookup.scala 33:37]
    node _T_22 = mux(_T_9, UInt<1>("h01"), _T_21) @[Lookup.scala 33:37]
    node _T_23 = mux(_T_7, UInt<1>("h00"), _T_22) @[Lookup.scala 33:37]
    node _T_24 = mux(_T_5, UInt<1>("h00"), _T_23) @[Lookup.scala 33:37]
    node _T_25 = mux(_T_3, UInt<1>("h00"), _T_24) @[Lookup.scala 33:37]
    node signals_0 = mux(_T_1, UInt<1>("h00"), _T_25) @[Lookup.scala 33:37]
    node _T_26 = mux(_T_17, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_27 = mux(_T_15, UInt<1>("h00"), _T_26) @[Lookup.scala 33:37]
    node _T_28 = mux(_T_13, UInt<1>("h00"), _T_27) @[Lookup.scala 33:37]
    node _T_29 = mux(_T_11, UInt<1>("h00"), _T_28) @[Lookup.scala 33:37]
    node _T_30 = mux(_T_9, UInt<1>("h00"), _T_29) @[Lookup.scala 33:37]
    node _T_31 = mux(_T_7, UInt<1>("h00"), _T_30) @[Lookup.scala 33:37]
    node _T_32 = mux(_T_5, UInt<1>("h00"), _T_31) @[Lookup.scala 33:37]
    node _T_33 = mux(_T_3, UInt<1>("h00"), _T_32) @[Lookup.scala 33:37]
    node signals_1 = mux(_T_1, UInt<1>("h00"), _T_33) @[Lookup.scala 33:37]
    node _T_34 = mux(_T_17, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_35 = mux(_T_15, UInt<1>("h01"), _T_34) @[Lookup.scala 33:37]
    node _T_36 = mux(_T_13, UInt<1>("h00"), _T_35) @[Lookup.scala 33:37]
    node _T_37 = mux(_T_11, UInt<1>("h00"), _T_36) @[Lookup.scala 33:37]
    node _T_38 = mux(_T_9, UInt<1>("h00"), _T_37) @[Lookup.scala 33:37]
    node _T_39 = mux(_T_7, UInt<1>("h00"), _T_38) @[Lookup.scala 33:37]
    node _T_40 = mux(_T_5, UInt<1>("h00"), _T_39) @[Lookup.scala 33:37]
    node _T_41 = mux(_T_3, UInt<1>("h00"), _T_40) @[Lookup.scala 33:37]
    node signals_2 = mux(_T_1, UInt<1>("h00"), _T_41) @[Lookup.scala 33:37]
    node _T_42 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_43 = mux(_T_15, UInt<1>("h00"), _T_42) @[Lookup.scala 33:37]
    node _T_44 = mux(_T_13, UInt<1>("h00"), _T_43) @[Lookup.scala 33:37]
    node _T_45 = mux(_T_11, UInt<1>("h00"), _T_44) @[Lookup.scala 33:37]
    node _T_46 = mux(_T_9, UInt<1>("h00"), _T_45) @[Lookup.scala 33:37]
    node _T_47 = mux(_T_7, UInt<1>("h00"), _T_46) @[Lookup.scala 33:37]
    node _T_48 = mux(_T_5, UInt<1>("h01"), _T_47) @[Lookup.scala 33:37]
    node _T_49 = mux(_T_3, UInt<1>("h00"), _T_48) @[Lookup.scala 33:37]
    node signals_3 = mux(_T_1, UInt<1>("h00"), _T_49) @[Lookup.scala 33:37]
    node _T_50 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_51 = mux(_T_15, UInt<1>("h00"), _T_50) @[Lookup.scala 33:37]
    node _T_52 = mux(_T_13, UInt<1>("h00"), _T_51) @[Lookup.scala 33:37]
    node _T_53 = mux(_T_11, UInt<1>("h00"), _T_52) @[Lookup.scala 33:37]
    node _T_54 = mux(_T_9, UInt<1>("h00"), _T_53) @[Lookup.scala 33:37]
    node _T_55 = mux(_T_7, UInt<1>("h01"), _T_54) @[Lookup.scala 33:37]
    node _T_56 = mux(_T_5, UInt<1>("h00"), _T_55) @[Lookup.scala 33:37]
    node _T_57 = mux(_T_3, UInt<1>("h00"), _T_56) @[Lookup.scala 33:37]
    node signals_4 = mux(_T_1, UInt<1>("h00"), _T_57) @[Lookup.scala 33:37]
    node _T_58 = mux(_T_17, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_59 = mux(_T_15, UInt<1>("h01"), _T_58) @[Lookup.scala 33:37]
    node _T_60 = mux(_T_13, UInt<1>("h01"), _T_59) @[Lookup.scala 33:37]
    node _T_61 = mux(_T_11, UInt<1>("h01"), _T_60) @[Lookup.scala 33:37]
    node _T_62 = mux(_T_9, UInt<1>("h00"), _T_61) @[Lookup.scala 33:37]
    node _T_63 = mux(_T_7, UInt<1>("h00"), _T_62) @[Lookup.scala 33:37]
    node _T_64 = mux(_T_5, UInt<1>("h01"), _T_63) @[Lookup.scala 33:37]
    node _T_65 = mux(_T_3, UInt<1>("h01"), _T_64) @[Lookup.scala 33:37]
    node signals_5 = mux(_T_1, UInt<1>("h01"), _T_65) @[Lookup.scala 33:37]
    node _T_66 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_67 = mux(_T_15, UInt<1>("h00"), _T_66) @[Lookup.scala 33:37]
    node _T_68 = mux(_T_13, UInt<1>("h00"), _T_67) @[Lookup.scala 33:37]
    node _T_69 = mux(_T_11, UInt<1>("h00"), _T_68) @[Lookup.scala 33:37]
    node _T_70 = mux(_T_9, UInt<1>("h00"), _T_69) @[Lookup.scala 33:37]
    node _T_71 = mux(_T_7, UInt<1>("h00"), _T_70) @[Lookup.scala 33:37]
    node _T_72 = mux(_T_5, UInt<1>("h01"), _T_71) @[Lookup.scala 33:37]
    node _T_73 = mux(_T_3, UInt<1>("h00"), _T_72) @[Lookup.scala 33:37]
    node signals_6 = mux(_T_1, UInt<1>("h00"), _T_73) @[Lookup.scala 33:37]
    node _T_74 = mux(_T_17, UInt<2>("h02"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_75 = mux(_T_15, UInt<2>("h02"), _T_74) @[Lookup.scala 33:37]
    node _T_76 = mux(_T_13, UInt<1>("h00"), _T_75) @[Lookup.scala 33:37]
    node _T_77 = mux(_T_11, UInt<1>("h01"), _T_76) @[Lookup.scala 33:37]
    node _T_78 = mux(_T_9, UInt<1>("h00"), _T_77) @[Lookup.scala 33:37]
    node _T_79 = mux(_T_7, UInt<1>("h00"), _T_78) @[Lookup.scala 33:37]
    node _T_80 = mux(_T_5, UInt<1>("h00"), _T_79) @[Lookup.scala 33:37]
    node _T_81 = mux(_T_3, UInt<1>("h00"), _T_80) @[Lookup.scala 33:37]
    node signals_7 = mux(_T_1, UInt<1>("h00"), _T_81) @[Lookup.scala 33:37]
    node _T_82 = mux(_T_17, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_83 = mux(_T_15, UInt<1>("h00"), _T_82) @[Lookup.scala 33:37]
    node _T_84 = mux(_T_13, UInt<1>("h01"), _T_83) @[Lookup.scala 33:37]
    node _T_85 = mux(_T_11, UInt<1>("h00"), _T_84) @[Lookup.scala 33:37]
    node _T_86 = mux(_T_9, UInt<1>("h00"), _T_85) @[Lookup.scala 33:37]
    node _T_87 = mux(_T_7, UInt<1>("h01"), _T_86) @[Lookup.scala 33:37]
    node _T_88 = mux(_T_5, UInt<1>("h01"), _T_87) @[Lookup.scala 33:37]
    node _T_89 = mux(_T_3, UInt<1>("h01"), _T_88) @[Lookup.scala 33:37]
    node signals_8 = mux(_T_1, UInt<1>("h00"), _T_89) @[Lookup.scala 33:37]
    node _T_90 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_91 = mux(_T_15, UInt<1>("h00"), _T_90) @[Lookup.scala 33:37]
    node _T_92 = mux(_T_13, UInt<1>("h01"), _T_91) @[Lookup.scala 33:37]
    node _T_93 = mux(_T_11, UInt<1>("h00"), _T_92) @[Lookup.scala 33:37]
    node _T_94 = mux(_T_9, UInt<1>("h00"), _T_93) @[Lookup.scala 33:37]
    node _T_95 = mux(_T_7, UInt<1>("h00"), _T_94) @[Lookup.scala 33:37]
    node _T_96 = mux(_T_5, UInt<1>("h00"), _T_95) @[Lookup.scala 33:37]
    node _T_97 = mux(_T_3, UInt<1>("h00"), _T_96) @[Lookup.scala 33:37]
    node signals_9 = mux(_T_1, UInt<1>("h00"), _T_97) @[Lookup.scala 33:37]
    node _T_98 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_99 = mux(_T_15, UInt<1>("h00"), _T_98) @[Lookup.scala 33:37]
    node _T_100 = mux(_T_13, UInt<1>("h00"), _T_99) @[Lookup.scala 33:37]
    node _T_101 = mux(_T_11, UInt<1>("h00"), _T_100) @[Lookup.scala 33:37]
    node _T_102 = mux(_T_9, UInt<1>("h00"), _T_101) @[Lookup.scala 33:37]
    node _T_103 = mux(_T_7, UInt<1>("h00"), _T_102) @[Lookup.scala 33:37]
    node _T_104 = mux(_T_5, UInt<1>("h00"), _T_103) @[Lookup.scala 33:37]
    node _T_105 = mux(_T_3, UInt<1>("h01"), _T_104) @[Lookup.scala 33:37]
    node signals_10 = mux(_T_1, UInt<1>("h00"), _T_105) @[Lookup.scala 33:37]
    node _T_106 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_107 = mux(_T_15, UInt<1>("h00"), _T_106) @[Lookup.scala 33:37]
    node _T_108 = mux(_T_13, UInt<1>("h00"), _T_107) @[Lookup.scala 33:37]
    node _T_109 = mux(_T_11, UInt<1>("h00"), _T_108) @[Lookup.scala 33:37]
    node _T_110 = mux(_T_9, UInt<1>("h01"), _T_109) @[Lookup.scala 33:37]
    node _T_111 = mux(_T_7, UInt<1>("h00"), _T_110) @[Lookup.scala 33:37]
    node _T_112 = mux(_T_5, UInt<1>("h00"), _T_111) @[Lookup.scala 33:37]
    node _T_113 = mux(_T_3, UInt<2>("h02"), _T_112) @[Lookup.scala 33:37]
    node signals_11 = mux(_T_1, UInt<2>("h02"), _T_113) @[Lookup.scala 33:37]
    node _T_114 = mux(_T_17, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_115 = mux(_T_15, UInt<1>("h01"), _T_114) @[Lookup.scala 33:37]
    node _T_116 = mux(_T_13, UInt<1>("h01"), _T_115) @[Lookup.scala 33:37]
    node _T_117 = mux(_T_11, UInt<1>("h01"), _T_116) @[Lookup.scala 33:37]
    node _T_118 = mux(_T_9, UInt<1>("h01"), _T_117) @[Lookup.scala 33:37]
    node _T_119 = mux(_T_7, UInt<1>("h01"), _T_118) @[Lookup.scala 33:37]
    node _T_120 = mux(_T_5, UInt<1>("h01"), _T_119) @[Lookup.scala 33:37]
    node _T_121 = mux(_T_3, UInt<1>("h01"), _T_120) @[Lookup.scala 33:37]
    node signals_12 = mux(_T_1, UInt<1>("h01"), _T_121) @[Lookup.scala 33:37]
    io.branch <= signals_0 @[control.scala 76:19]
    io.pcfromalu <= signals_1 @[control.scala 77:19]
    io.jump <= signals_2 @[control.scala 78:19]
    io.memread <= signals_3 @[control.scala 79:19]
    io.memwrite <= signals_4 @[control.scala 80:19]
    io.regwrite <= signals_5 @[control.scala 81:19]
    io.toreg <= signals_6 @[control.scala 82:19]
    io.resultselect <= signals_7 @[control.scala 83:19]
    io.alusrc <= signals_8 @[control.scala 84:19]
    io.pcadd <= signals_9 @[control.scala 85:19]
    io.itype <= signals_10 @[control.scala 86:19]
    io.aluop <= signals_11 @[control.scala 87:19]
    io.validinst <= signals_12 @[control.scala 88:19]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip readreg1 : UInt<5>, flip readreg2 : UInt<5>, flip writereg : UInt<5>, flip writedata : UInt<32>, flip wen : UInt<1>, readdata1 : UInt<32>, readdata2 : UInt<32>}
    
    reg regs : UInt<32>[32], clock @[register_file.scala 50:17]
    when io.wen : @[register_file.scala 53:17]
      regs[io.writereg] <= io.writedata @[register_file.scala 54:23]
      skip @[register_file.scala 53:17]
    io.readdata1 <= regs[io.readreg1] @[register_file.scala 59:16]
    io.readdata2 <= regs[io.readreg2] @[register_file.scala 60:16]
    
  module ALUControl : 
    input clock : Clock
    input reset : Reset
    output io : {flip aluop : UInt<2>, flip itype : UInt<1>, flip funct7 : UInt<7>, flip funct3 : UInt<3>, operation : UInt<4>}
    
    node _T = eq(io.aluop, UInt<1>("h00")) @[ALUControl.scala 25:18]
    when _T : @[ALUControl.scala 25:31]
      io.operation <= UInt<2>("h02") @[ALUControl.scala 26:18]
      skip @[ALUControl.scala 25:31]
    else : @[ALUControl.scala 27:39]
      node _T_1 = eq(io.aluop, UInt<2>("h02")) @[ALUControl.scala 27:25]
      when _T_1 : @[ALUControl.scala 27:39]
        node _T_2 = eq(io.funct3, UInt<1>("h00")) @[ALUControl.scala 28:21]
        when _T_2 : @[ALUControl.scala 28:35]
          node _T_3 = eq(io.funct7, UInt<1>("h00")) @[ALUControl.scala 29:35]
          node _T_4 = or(io.itype, _T_3) @[ALUControl.scala 29:22]
          when _T_4 : @[ALUControl.scala 29:53]
            io.operation <= UInt<2>("h02") @[ALUControl.scala 30:22]
            skip @[ALUControl.scala 29:53]
          else : @[ALUControl.scala 31:20]
            io.operation <= UInt<2>("h03") @[ALUControl.scala 32:22]
            skip @[ALUControl.scala 31:20]
          skip @[ALUControl.scala 28:35]
        else : @[ALUControl.scala 35:42]
          node _T_5 = eq(io.funct3, UInt<1>("h01")) @[ALUControl.scala 35:28]
          when _T_5 : @[ALUControl.scala 35:42]
            io.operation <= UInt<4>("h09") @[ALUControl.scala 35:57]
            skip @[ALUControl.scala 35:42]
          else : @[ALUControl.scala 36:42]
            node _T_6 = eq(io.funct3, UInt<2>("h02")) @[ALUControl.scala 36:28]
            when _T_6 : @[ALUControl.scala 36:42]
              io.operation <= UInt<4>("h08") @[ALUControl.scala 36:57]
              skip @[ALUControl.scala 36:42]
            else : @[ALUControl.scala 37:42]
              node _T_7 = eq(io.funct3, UInt<2>("h03")) @[ALUControl.scala 37:28]
              when _T_7 : @[ALUControl.scala 37:42]
                io.operation <= UInt<3>("h05") @[ALUControl.scala 37:57]
                skip @[ALUControl.scala 37:42]
              else : @[ALUControl.scala 38:42]
                node _T_8 = eq(io.funct3, UInt<3>("h04")) @[ALUControl.scala 38:28]
                when _T_8 : @[ALUControl.scala 38:42]
                  io.operation <= UInt<3>("h06") @[ALUControl.scala 38:57]
                  skip @[ALUControl.scala 38:42]
                else : @[ALUControl.scala 39:42]
                  node _T_9 = eq(io.funct3, UInt<3>("h05")) @[ALUControl.scala 39:28]
                  when _T_9 : @[ALUControl.scala 39:42]
                    node _T_10 = eq(io.funct7, UInt<1>("h00")) @[ALUControl.scala 40:25]
                    when _T_10 : @[ALUControl.scala 40:43]
                      io.operation <= UInt<3>("h07") @[ALUControl.scala 41:24]
                      skip @[ALUControl.scala 40:43]
                    else : @[ALUControl.scala 42:22]
                      io.operation <= UInt<3>("h04") @[ALUControl.scala 43:24]
                      skip @[ALUControl.scala 42:22]
                    skip @[ALUControl.scala 39:42]
                  else : @[ALUControl.scala 46:42]
                    node _T_11 = eq(io.funct3, UInt<3>("h06")) @[ALUControl.scala 46:28]
                    when _T_11 : @[ALUControl.scala 46:42]
                      io.operation <= UInt<1>("h01") @[ALUControl.scala 46:57]
                      skip @[ALUControl.scala 46:42]
                    else : @[ALUControl.scala 48:7]
                      io.operation <= UInt<1>("h00") @[ALUControl.scala 48:22]
                      skip @[ALUControl.scala 48:7]
        skip @[ALUControl.scala 27:39]
      else : @[ALUControl.scala 49:38]
        node _T_12 = eq(io.aluop, UInt<1>("h01")) @[ALUControl.scala 49:25]
        when _T_12 : @[ALUControl.scala 49:38]
          node _T_13 = eq(io.funct3, UInt<1>("h00")) @[ALUControl.scala 50:21]
          when _T_13 : @[ALUControl.scala 50:35]
            io.operation <= UInt<4>("h0d") @[ALUControl.scala 50:50]
            skip @[ALUControl.scala 50:35]
          else : @[ALUControl.scala 51:42]
            node _T_14 = eq(io.funct3, UInt<1>("h01")) @[ALUControl.scala 51:28]
            when _T_14 : @[ALUControl.scala 51:42]
              io.operation <= UInt<4>("h0e") @[ALUControl.scala 51:57]
              skip @[ALUControl.scala 51:42]
            else : @[ALUControl.scala 52:42]
              node _T_15 = eq(io.funct3, UInt<3>("h04")) @[ALUControl.scala 52:28]
              when _T_15 : @[ALUControl.scala 52:42]
                io.operation <= UInt<4>("h08") @[ALUControl.scala 52:57]
                skip @[ALUControl.scala 52:42]
              else : @[ALUControl.scala 53:42]
                node _T_16 = eq(io.funct3, UInt<3>("h05")) @[ALUControl.scala 53:28]
                when _T_16 : @[ALUControl.scala 53:42]
                  io.operation <= UInt<4>("h0b") @[ALUControl.scala 53:57]
                  skip @[ALUControl.scala 53:42]
                else : @[ALUControl.scala 54:42]
                  node _T_17 = eq(io.funct3, UInt<3>("h06")) @[ALUControl.scala 54:28]
                  when _T_17 : @[ALUControl.scala 54:42]
                    io.operation <= UInt<3>("h05") @[ALUControl.scala 54:57]
                    skip @[ALUControl.scala 54:42]
                  else : @[ALUControl.scala 55:42]
                    node _T_18 = eq(io.funct3, UInt<3>("h07")) @[ALUControl.scala 55:28]
                    when _T_18 : @[ALUControl.scala 55:42]
                      io.operation <= UInt<4>("h0c") @[ALUControl.scala 55:57]
                      skip @[ALUControl.scala 55:42]
                    else : @[ALUControl.scala 56:18]
                      io.operation <= UInt<4>("h0f") @[ALUControl.scala 56:33]
                      skip @[ALUControl.scala 56:18]
          skip @[ALUControl.scala 49:38]
        else : @[ALUControl.scala 57:16]
          io.operation <= UInt<4>("h0f") @[ALUControl.scala 57:31]
          skip @[ALUControl.scala 57:16]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip operation : UInt<4>, flip inputx : UInt<32>, flip inputy : UInt<32>, result : UInt<32>}
    
    node _T = eq(io.operation, UInt<1>("h00")) @[ALU.scala 23:22]
    when _T : @[ALU.scala 23:37]
      node _T_1 = and(io.inputx, io.inputy) @[ALU.scala 24:28]
      io.result <= _T_1 @[ALU.scala 24:15]
      skip @[ALU.scala 23:37]
    else : @[ALU.scala 26:44]
      node _T_2 = eq(io.operation, UInt<1>("h01")) @[ALU.scala 26:29]
      when _T_2 : @[ALU.scala 26:44]
        node _T_3 = or(io.inputx, io.inputy) @[ALU.scala 27:30]
        io.result <= _T_3 @[ALU.scala 27:17]
        skip @[ALU.scala 26:44]
      else : @[ALU.scala 29:44]
        node _T_4 = eq(io.operation, UInt<2>("h02")) @[ALU.scala 29:29]
        when _T_4 : @[ALU.scala 29:44]
          node _T_5 = add(io.inputx, io.inputy) @[ALU.scala 30:30]
          node _T_6 = tail(_T_5, 1) @[ALU.scala 30:30]
          io.result <= _T_6 @[ALU.scala 30:17]
          skip @[ALU.scala 29:44]
        else : @[ALU.scala 32:44]
          node _T_7 = eq(io.operation, UInt<2>("h03")) @[ALU.scala 32:29]
          when _T_7 : @[ALU.scala 32:44]
            node _T_8 = sub(io.inputx, io.inputy) @[ALU.scala 33:30]
            node _T_9 = tail(_T_8, 1) @[ALU.scala 33:30]
            io.result <= _T_9 @[ALU.scala 33:17]
            skip @[ALU.scala 32:44]
          else : @[ALU.scala 35:44]
            node _T_10 = eq(io.operation, UInt<3>("h04")) @[ALU.scala 35:29]
            when _T_10 : @[ALU.scala 35:44]
              node _T_11 = asSInt(io.inputx) @[ALU.scala 36:31]
              node _T_12 = bits(io.inputy, 4, 0) @[ALU.scala 36:50]
              node _T_13 = dshr(_T_11, _T_12) @[ALU.scala 36:38]
              node _T_14 = asUInt(_T_13) @[ALU.scala 36:57]
              io.result <= _T_14 @[ALU.scala 36:17]
              skip @[ALU.scala 35:44]
            else : @[ALU.scala 38:44]
              node _T_15 = eq(io.operation, UInt<3>("h05")) @[ALU.scala 38:29]
              when _T_15 : @[ALU.scala 38:44]
                node _T_16 = lt(io.inputx, io.inputy) @[ALU.scala 39:31]
                io.result <= _T_16 @[ALU.scala 39:17]
                skip @[ALU.scala 38:44]
              else : @[ALU.scala 41:44]
                node _T_17 = eq(io.operation, UInt<3>("h06")) @[ALU.scala 41:29]
                when _T_17 : @[ALU.scala 41:44]
                  node _T_18 = xor(io.inputx, io.inputy) @[ALU.scala 42:30]
                  io.result <= _T_18 @[ALU.scala 42:17]
                  skip @[ALU.scala 41:44]
                else : @[ALU.scala 44:44]
                  node _T_19 = eq(io.operation, UInt<3>("h07")) @[ALU.scala 44:29]
                  when _T_19 : @[ALU.scala 44:44]
                    node _T_20 = bits(io.inputy, 4, 0) @[ALU.scala 45:42]
                    node _T_21 = dshr(io.inputx, _T_20) @[ALU.scala 45:30]
                    io.result <= _T_21 @[ALU.scala 45:17]
                    skip @[ALU.scala 44:44]
                  else : @[ALU.scala 47:44]
                    node _T_22 = eq(io.operation, UInt<4>("h08")) @[ALU.scala 47:29]
                    when _T_22 : @[ALU.scala 47:44]
                      node _T_23 = asSInt(io.inputx) @[ALU.scala 48:31]
                      node _T_24 = asSInt(io.inputy) @[ALU.scala 48:50]
                      node _T_25 = lt(_T_23, _T_24) @[ALU.scala 48:38]
                      io.result <= _T_25 @[ALU.scala 48:17]
                      skip @[ALU.scala 47:44]
                    else : @[ALU.scala 50:44]
                      node _T_26 = eq(io.operation, UInt<4>("h09")) @[ALU.scala 50:29]
                      when _T_26 : @[ALU.scala 50:44]
                        node _T_27 = bits(io.inputy, 4, 0) @[ALU.scala 51:42]
                        node _T_28 = dshl(io.inputx, _T_27) @[ALU.scala 51:30]
                        io.result <= _T_28 @[ALU.scala 51:17]
                        skip @[ALU.scala 50:44]
                      else : @[ALU.scala 53:44]
                        node _T_29 = eq(io.operation, UInt<4>("h0a")) @[ALU.scala 53:29]
                        when _T_29 : @[ALU.scala 53:44]
                          node _T_30 = or(io.inputx, io.inputy) @[ALU.scala 54:32]
                          node _T_31 = not(_T_30) @[ALU.scala 54:20]
                          io.result <= _T_31 @[ALU.scala 54:17]
                          skip @[ALU.scala 53:44]
                        else : @[ALU.scala 56:44]
                          node _T_32 = eq(io.operation, UInt<4>("h0b")) @[ALU.scala 56:29]
                          when _T_32 : @[ALU.scala 56:44]
                            node _T_33 = asSInt(io.inputx) @[ALU.scala 57:31]
                            node _T_34 = asSInt(io.inputy) @[ALU.scala 57:51]
                            node _T_35 = geq(_T_33, _T_34) @[ALU.scala 57:38]
                            io.result <= _T_35 @[ALU.scala 57:17]
                            skip @[ALU.scala 56:44]
                          else : @[ALU.scala 59:44]
                            node _T_36 = eq(io.operation, UInt<4>("h0c")) @[ALU.scala 59:29]
                            when _T_36 : @[ALU.scala 59:44]
                              node _T_37 = geq(io.inputx, io.inputy) @[ALU.scala 60:31]
                              io.result <= _T_37 @[ALU.scala 60:17]
                              skip @[ALU.scala 59:44]
                            else : @[ALU.scala 62:44]
                              node _T_38 = eq(io.operation, UInt<4>("h0d")) @[ALU.scala 62:29]
                              when _T_38 : @[ALU.scala 62:44]
                                node _T_39 = eq(io.inputx, io.inputy) @[ALU.scala 63:30]
                                io.result <= _T_39 @[ALU.scala 63:17]
                                skip @[ALU.scala 62:44]
                              else : @[ALU.scala 65:44]
                                node _T_40 = eq(io.operation, UInt<4>("h0e")) @[ALU.scala 65:29]
                                when _T_40 : @[ALU.scala 65:44]
                                  node _T_41 = neq(io.inputx, io.inputy) @[ALU.scala 66:30]
                                  io.result <= _T_41 @[ALU.scala 66:17]
                                  skip @[ALU.scala 65:44]
                                else : @[ALU.scala 68:16]
                                  io.result <= UInt<1>("h00") @[ALU.scala 69:17]
                                  skip @[ALU.scala 68:16]
    
  module ImmediateGenerator : 
    input clock : Clock
    input reset : Reset
    output io : {flip instruction : UInt<32>, sextImm : UInt<32>}
    
    io.sextImm <= UInt<1>("h00") @[ImmediateGenerator.scala 20:14]
    node opcode = bits(io.instruction, 6, 0) @[ImmediateGenerator.scala 22:30]
    node _T = eq(UInt<6>("h037"), opcode) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = bits(io.instruction, 31, 12) @[ImmediateGenerator.scala 25:31]
      node _T_2 = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
      node _T_3 = cat(_T_1, _T_2) @[Cat.scala 29:58]
      io.sextImm <= _T_3 @[ImmediateGenerator.scala 26:18]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_4 = eq(UInt<5>("h017"), opcode) @[Conditional.scala 37:30]
      when _T_4 : @[Conditional.scala 39:67]
        node _T_5 = bits(io.instruction, 31, 12) @[ImmediateGenerator.scala 29:31]
        node _T_6 = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
        node _T_7 = cat(_T_5, _T_6) @[Cat.scala 29:58]
        io.sextImm <= _T_7 @[ImmediateGenerator.scala 30:18]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_8 = eq(UInt<7>("h06f"), opcode) @[Conditional.scala 37:30]
        when _T_8 : @[Conditional.scala 39:67]
          node _T_9 = bits(io.instruction, 31, 31) @[ImmediateGenerator.scala 33:35]
          node _T_10 = bits(io.instruction, 19, 12) @[ImmediateGenerator.scala 33:55]
          node _T_11 = bits(io.instruction, 20, 20) @[ImmediateGenerator.scala 34:23]
          node _T_12 = bits(io.instruction, 30, 21) @[ImmediateGenerator.scala 34:43]
          node _T_13 = cat(_T_11, _T_12) @[Cat.scala 29:58]
          node _T_14 = cat(_T_9, _T_10) @[Cat.scala 29:58]
          node _T_15 = cat(_T_14, _T_13) @[Cat.scala 29:58]
          node _T_16 = bits(_T_15, 19, 19) @[ImmediateGenerator.scala 35:36]
          node _T_17 = bits(_T_16, 0, 0) @[Bitwise.scala 72:15]
          node _T_18 = mux(_T_17, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
          node _T_19 = cat(_T_18, _T_15) @[Cat.scala 29:58]
          node _T_20 = cat(_T_19, UInt<1>("h00")) @[Cat.scala 29:58]
          io.sextImm <= _T_20 @[ImmediateGenerator.scala 35:18]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_21 = eq(UInt<7>("h067"), opcode) @[Conditional.scala 37:30]
          when _T_21 : @[Conditional.scala 39:67]
            node _T_22 = bits(io.instruction, 31, 20) @[ImmediateGenerator.scala 38:31]
            node _T_23 = bits(_T_22, 11, 11) @[ImmediateGenerator.scala 39:36]
            node _T_24 = bits(_T_23, 0, 0) @[Bitwise.scala 72:15]
            node _T_25 = mux(_T_24, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
            node _T_26 = cat(_T_25, _T_22) @[Cat.scala 29:58]
            io.sextImm <= _T_26 @[ImmediateGenerator.scala 39:18]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_27 = eq(UInt<7>("h063"), opcode) @[Conditional.scala 37:30]
            when _T_27 : @[Conditional.scala 39:67]
              node _T_28 = bits(io.instruction, 31, 31) @[ImmediateGenerator.scala 42:35]
              node _T_29 = bits(io.instruction, 7, 7) @[ImmediateGenerator.scala 42:55]
              node _T_30 = bits(io.instruction, 30, 25) @[ImmediateGenerator.scala 43:23]
              node _T_31 = bits(io.instruction, 11, 8) @[ImmediateGenerator.scala 43:46]
              node _T_32 = cat(_T_30, _T_31) @[Cat.scala 29:58]
              node _T_33 = cat(_T_28, _T_29) @[Cat.scala 29:58]
              node _T_34 = cat(_T_33, _T_32) @[Cat.scala 29:58]
              node _T_35 = bits(_T_34, 11, 11) @[ImmediateGenerator.scala 44:37]
              node _T_36 = bits(_T_35, 0, 0) @[Bitwise.scala 72:15]
              node _T_37 = mux(_T_36, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
              node _T_38 = cat(_T_37, _T_34) @[Cat.scala 29:58]
              node _T_39 = cat(_T_38, UInt<1>("h00")) @[Cat.scala 29:58]
              io.sextImm <= _T_39 @[ImmediateGenerator.scala 44:18]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_40 = eq(UInt<2>("h03"), opcode) @[Conditional.scala 37:30]
              when _T_40 : @[Conditional.scala 39:67]
                node _T_41 = bits(io.instruction, 31, 20) @[ImmediateGenerator.scala 47:31]
                node _T_42 = bits(_T_41, 11, 11) @[ImmediateGenerator.scala 48:36]
                node _T_43 = bits(_T_42, 0, 0) @[Bitwise.scala 72:15]
                node _T_44 = mux(_T_43, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
                node _T_45 = cat(_T_44, _T_41) @[Cat.scala 29:58]
                io.sextImm <= _T_45 @[ImmediateGenerator.scala 48:18]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_46 = eq(UInt<6>("h023"), opcode) @[Conditional.scala 37:30]
                when _T_46 : @[Conditional.scala 39:67]
                  node _T_47 = bits(io.instruction, 31, 25) @[ImmediateGenerator.scala 51:35]
                  node _T_48 = bits(io.instruction, 11, 7) @[ImmediateGenerator.scala 51:59]
                  node _T_49 = cat(_T_47, _T_48) @[Cat.scala 29:58]
                  node _T_50 = bits(_T_49, 11, 11) @[ImmediateGenerator.scala 52:36]
                  node _T_51 = bits(_T_50, 0, 0) @[Bitwise.scala 72:15]
                  node _T_52 = mux(_T_51, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
                  node _T_53 = cat(_T_52, _T_49) @[Cat.scala 29:58]
                  io.sextImm <= _T_53 @[ImmediateGenerator.scala 52:18]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_54 = eq(UInt<5>("h013"), opcode) @[Conditional.scala 37:30]
                  when _T_54 : @[Conditional.scala 39:67]
                    node _T_55 = bits(io.instruction, 31, 20) @[ImmediateGenerator.scala 55:31]
                    node _T_56 = bits(_T_55, 11, 11) @[ImmediateGenerator.scala 56:36]
                    node _T_57 = bits(_T_56, 0, 0) @[Bitwise.scala 72:15]
                    node _T_58 = mux(_T_57, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
                    node _T_59 = cat(_T_58, _T_55) @[Cat.scala 29:58]
                    io.sextImm <= _T_59 @[ImmediateGenerator.scala 56:18]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_60 = eq(UInt<7>("h073"), opcode) @[Conditional.scala 37:30]
                    when _T_60 : @[Conditional.scala 39:67]
                      node _T_61 = mux(UInt<1>("h00"), UInt<27>("h07ffffff"), UInt<27>("h00")) @[Bitwise.scala 72:12]
                      node _T_62 = bits(io.instruction, 19, 15) @[ImmediateGenerator.scala 59:53]
                      node _T_63 = cat(_T_61, _T_62) @[Cat.scala 29:58]
                      io.sextImm <= _T_63 @[ImmediateGenerator.scala 59:18]
                      skip @[Conditional.scala 39:67]
    
  module Adder : 
    input clock : Clock
    input reset : Reset
    output io : {flip inputx : UInt<32>, flip inputy : UInt<32>, result : UInt<32>}
    
    node _T = add(io.inputx, io.inputy) @[Adder.scala 18:26]
    node _T_1 = tail(_T, 1) @[Adder.scala 18:26]
    io.result <= _T_1 @[Adder.scala 18:13]
    
  module Adder_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip inputx : UInt<32>, flip inputy : UInt<32>, result : UInt<32>}
    
    node _T = add(io.inputx, io.inputy) @[Adder.scala 18:26]
    node _T_1 = tail(_T, 1) @[Adder.scala 18:26]
    io.result <= _T_1 @[Adder.scala 18:13]
    
  module CPU : 
    input clock : Clock
    input reset : Reset
    output io : {flip imem : {flip address : UInt<32>, flip valid : UInt<1>, good : UInt<1>, instruction : UInt<32>, ready : UInt<1>}, flip dmem : {flip address : UInt<32>, flip valid : UInt<1>, good : UInt<1>, flip writedata : UInt<32>, flip memread : UInt<1>, flip memwrite : UInt<1>, flip maskmode : UInt<2>, flip sext : UInt<1>, readdata : UInt<32>}}
    
    reg pc : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[CPU.scala 25:37]
    inst control of Control @[CPU.scala 26:26]
    control.clock <= clock
    control.reset <= reset
    inst registers of RegisterFile @[CPU.scala 27:26]
    registers.clock <= clock
    registers.reset <= reset
    inst aluControl of ALUControl @[CPU.scala 28:26]
    aluControl.clock <= clock
    aluControl.reset <= reset
    inst alu of ALU @[CPU.scala 29:26]
    alu.clock <= clock
    alu.reset <= reset
    inst immGen of ImmediateGenerator @[CPU.scala 30:26]
    immGen.clock <= clock
    immGen.reset <= reset
    inst pcPlusFour of Adder @[CPU.scala 31:26]
    pcPlusFour.clock <= clock
    pcPlusFour.reset <= reset
    inst branchAdd of Adder_1 @[CPU.scala 32:26]
    branchAdd.clock <= clock
    branchAdd.reset <= reset
    reg cycleCount : UInt<30>, clock with : (reset => (reset, UInt<30>("h00"))) @[Counter.scala 29:33]
    wire _T : UInt<1>
    _T <= UInt<1>("h00")
    when UInt<1>("h01") : @[Counter.scala 67:17]
      node _T_1 = eq(cycleCount, UInt<30>("h03fffffff")) @[Counter.scala 38:24]
      node _T_2 = add(cycleCount, UInt<1>("h01")) @[Counter.scala 39:22]
      node _T_3 = tail(_T_2, 1) @[Counter.scala 39:22]
      cycleCount <= _T_3 @[Counter.scala 39:13]
      _T <= _T_1 @[Counter.scala 67:24]
      skip @[Counter.scala 67:17]
    io.imem.address <= pc @[CPU.scala 37:19]
    io.imem.valid <= UInt<1>("h01") @[CPU.scala 38:17]
    pcPlusFour.io.inputx <= pc @[CPU.scala 40:24]
    pcPlusFour.io.inputy <= UInt<3>("h04") @[CPU.scala 41:24]
    node opcode = bits(io.imem.instruction, 6, 0) @[CPU.scala 44:27]
    control.io.opcode <= opcode @[CPU.scala 47:21]
    node _T_4 = bits(io.imem.instruction, 19, 15) @[CPU.scala 49:39]
    registers.io.readreg1 <= _T_4 @[CPU.scala 49:25]
    node _T_5 = bits(io.imem.instruction, 24, 20) @[CPU.scala 50:39]
    registers.io.readreg2 <= _T_5 @[CPU.scala 50:25]
    node _T_6 = bits(io.imem.instruction, 11, 7) @[CPU.scala 52:39]
    registers.io.writereg <= _T_6 @[CPU.scala 52:25]
    node _T_7 = neq(registers.io.writereg, UInt<1>("h00")) @[CPU.scala 53:76]
    node _T_8 = and(control.io.regwrite, _T_7) @[CPU.scala 53:50]
    registers.io.wen <= _T_8 @[CPU.scala 53:25]
    immGen.io.instruction <= io.imem.instruction @[CPU.scala 55:25]
    aluControl.io.aluop <= control.io.aluop @[CPU.scala 59:24]
    aluControl.io.itype <= control.io.itype @[CPU.scala 60:24]
    node _T_9 = bits(io.imem.instruction, 31, 25) @[CPU.scala 61:38]
    aluControl.io.funct7 <= _T_9 @[CPU.scala 61:24]
    node _T_10 = bits(io.imem.instruction, 14, 12) @[CPU.scala 62:38]
    aluControl.io.funct3 <= _T_10 @[CPU.scala 62:24]
    alu.io.operation <= aluControl.io.operation @[CPU.scala 64:20]
    when control.io.pcadd : @[CPU.scala 66:27]
      alu.io.inputx <= pc @[CPU.scala 67:19]
      skip @[CPU.scala 66:27]
    else : @[CPU.scala 68:16]
      alu.io.inputx <= registers.io.readdata1 @[CPU.scala 69:19]
      skip @[CPU.scala 68:16]
    when control.io.alusrc : @[CPU.scala 72:28]
      alu.io.inputy <= immGen.io.sextImm @[CPU.scala 73:19]
      skip @[CPU.scala 72:28]
    else : @[CPU.scala 74:16]
      alu.io.inputy <= registers.io.readdata2 @[CPU.scala 75:19]
      skip @[CPU.scala 74:16]
    node _T_11 = eq(control.io.resultselect, UInt<1>("h00")) @[CPU.scala 79:30]
    node _T_12 = eq(control.io.resultselect, UInt<1>("h01")) @[CPU.scala 80:30]
    node _T_13 = eq(control.io.resultselect, UInt<2>("h02")) @[CPU.scala 81:30]
    node _T_14 = mux(_T_13, pcPlusFour.io.result, UInt<1>("h00")) @[Mux.scala 98:16]
    node _T_15 = mux(_T_12, immGen.io.sextImm, _T_14) @[Mux.scala 98:16]
    node result = mux(_T_11, alu.io.result, _T_15) @[Mux.scala 98:16]
    io.dmem.address <= alu.io.result @[CPU.scala 84:21]
    io.dmem.writedata <= registers.io.readdata2 @[CPU.scala 85:21]
    io.dmem.memread <= control.io.memread @[CPU.scala 86:21]
    io.dmem.memwrite <= control.io.memwrite @[CPU.scala 87:21]
    node _T_16 = bits(io.imem.instruction, 13, 12) @[CPU.scala 88:35]
    io.dmem.maskmode <= _T_16 @[CPU.scala 88:21]
    node _T_17 = bits(io.imem.instruction, 14, 14) @[CPU.scala 89:36]
    node _T_18 = not(_T_17) @[CPU.scala 89:24]
    io.dmem.sext <= _T_18 @[CPU.scala 89:21]
    node _T_19 = or(io.dmem.memread, io.dmem.memwrite) @[CPU.scala 91:24]
    when _T_19 : @[CPU.scala 91:45]
      io.dmem.valid <= UInt<1>("h01") @[CPU.scala 93:19]
      skip @[CPU.scala 91:45]
    else : @[CPU.scala 94:16]
      io.dmem.valid <= UInt<1>("h00") @[CPU.scala 95:19]
      skip @[CPU.scala 94:16]
    node _T_20 = eq(control.io.toreg, UInt<1>("h00")) @[CPU.scala 100:23]
    node _T_21 = eq(control.io.toreg, UInt<1>("h01")) @[CPU.scala 101:23]
    node _T_22 = mux(_T_21, io.dmem.readdata, UInt<1>("h00")) @[Mux.scala 98:16]
    node _T_23 = mux(_T_20, result, _T_22) @[Mux.scala 98:16]
    registers.io.writedata <= _T_23 @[CPU.scala 99:26]
    branchAdd.io.inputx <= pc @[CPU.scala 104:23]
    branchAdd.io.inputy <= immGen.io.sextImm @[CPU.scala 105:23]
    node _T_24 = bits(alu.io.result, 0, 0) @[CPU.scala 107:43]
    node _T_25 = and(control.io.branch, _T_24) @[CPU.scala 107:27]
    when _T_25 : @[CPU.scala 107:48]
      pc <= branchAdd.io.result @[CPU.scala 108:8]
      skip @[CPU.scala 107:48]
    else : @[CPU.scala 109:33]
      when control.io.jump : @[CPU.scala 109:33]
        when control.io.pcfromalu : @[CPU.scala 110:33]
          node _T_26 = mux(UInt<1>("h01"), UInt<31>("h07fffffff"), UInt<31>("h00")) @[Bitwise.scala 72:12]
          node _T_27 = cat(_T_26, UInt<1>("h00")) @[Cat.scala 29:58]
          node _T_28 = and(alu.io.result, _T_27) @[CPU.scala 111:27]
          pc <= _T_28 @[CPU.scala 111:10]
          skip @[CPU.scala 110:33]
        else : @[CPU.scala 112:18]
          pc <= branchAdd.io.result @[CPU.scala 113:10]
          skip @[CPU.scala 112:18]
        skip @[CPU.scala 109:33]
      else : @[CPU.scala 115:16]
        pc <= pcPlusFour.io.result @[CPU.scala 116:8]
        skip @[CPU.scala 115:16]
    
  module DualPortedCombinMemory : 
    input clock : Clock
    input reset : Reset
    output io : {imem : {flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}}, response : {valid : UInt<1>, bits : {data : UInt<32>}}}, dmem : {flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}}, response : {valid : UInt<1>, bits : {data : UInt<32>}}}, flip rx_data : UInt<32>, flip rx_rstrb : UInt<1>, rx_data_done : UInt<1>, tx_data : UInt<32>, tx_wstrb : UInt<1>, test_passed : UInt<1>}
    
    io.imem.request.bits.operation is invalid @[base-memory-components.scala 38:19]
    io.imem.request.bits.writedata is invalid @[base-memory-components.scala 38:19]
    io.imem.request.bits.address is invalid @[base-memory-components.scala 38:19]
    io.imem.request.valid is invalid @[base-memory-components.scala 38:19]
    io.imem.request.ready is invalid @[base-memory-components.scala 38:19]
    io.dmem.request.bits.operation is invalid @[base-memory-components.scala 39:19]
    io.dmem.request.bits.writedata is invalid @[base-memory-components.scala 39:19]
    io.dmem.request.bits.address is invalid @[base-memory-components.scala 39:19]
    io.dmem.request.valid is invalid @[base-memory-components.scala 39:19]
    io.dmem.request.ready is invalid @[base-memory-components.scala 39:19]
    io.rx_data is invalid @[base-memory-components.scala 40:14]
    io.rx_rstrb is invalid @[base-memory-components.scala 41:15]
    io.rx_data_done is invalid @[base-memory-components.scala 42:19]
    io.tx_data is invalid @[base-memory-components.scala 43:14]
    io.tx_wstrb is invalid @[base-memory-components.scala 44:15]
    io.test_passed is invalid @[base-memory-components.scala 45:18]
    wire _T : {valid : UInt<1>, bits : {data : UInt<32>}} @[base-memory-components.scala 48:35]
    _T.bits.data <= UInt<32>("h00") @[base-memory-components.scala 48:35]
    _T.valid <= UInt<1>("h00") @[base-memory-components.scala 48:35]
    io.imem.response.bits.data <= _T.bits.data @[base-memory-components.scala 48:20]
    io.imem.response.valid <= _T.valid @[base-memory-components.scala 48:20]
    wire _T_1 : {valid : UInt<1>, bits : {data : UInt<32>}} @[base-memory-components.scala 49:35]
    _T_1.bits.data <= UInt<32>("h00") @[base-memory-components.scala 49:35]
    _T_1.valid <= UInt<1>("h00") @[base-memory-components.scala 49:35]
    io.dmem.response.bits.data <= _T_1.bits.data @[base-memory-components.scala 49:20]
    io.dmem.response.valid <= _T_1.valid @[base-memory-components.scala 49:20]
    cmem memory : UInt<32>[262144] @[base-memory-components.scala 51:19]
    reg r1 : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[memory.scala 22:19]
    reg passed_reg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[memory.scala 23:27]
    reg r2 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[memory.scala 24:19]
    reg r3 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[memory.scala 25:19]
    reg r4 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[memory.scala 26:19]
    io.imem.response.valid <= UInt<1>("h00") @[memory.scala 17:27]
    io.imem.request.ready <= UInt<1>("h01") @[memory.scala 19:26]
    when io.imem.request.valid : @[memory.scala 31:32]
      node _T_2 = eq(io.imem.request.bits.operation, UInt<1>("h00")) @[memory.scala 36:30]
      node _T_3 = asUInt(reset) @[memory.scala 36:11]
      node _T_4 = or(_T_2, _T_3) @[memory.scala 36:11]
      node _T_5 = eq(_T_4, UInt<1>("h00")) @[memory.scala 36:11]
      when _T_5 : @[memory.scala 36:11]
        printf(clock, UInt<1>(1), "Assertion failed\n    at memory.scala:36 assert(request.operation === Read)\n") @[memory.scala 36:11]
        stop(clock, UInt<1>(1), 1) @[memory.scala 36:11]
        skip @[memory.scala 36:11]
      io.imem.response.valid <= UInt<1>("h01") @[memory.scala 43:30]
      node _T_6 = shr(io.imem.request.bits.address, 2) @[memory.scala 44:60]
      node _T_7 = bits(_T_6, 17, 0) @[memory.scala 44:43]
      infer mport _T_8 = memory[_T_7], clock @[memory.scala 44:43]
      io.imem.response.bits.data <= _T_8 @[memory.scala 44:34]
      skip @[memory.scala 31:32]
    else : @[memory.scala 48:16]
      io.imem.response.valid <= UInt<1>("h00") @[memory.scala 49:28]
      skip @[memory.scala 48:16]
    io.dmem.response.valid <= UInt<1>("h00") @[memory.scala 17:27]
    io.dmem.request.ready <= UInt<1>("h01") @[memory.scala 19:26]
    io.rx_data_done <= r1 @[memory.scala 59:19]
    r1 <= UInt<1>("h00") @[memory.scala 60:6]
    io.tx_data <= r2 @[memory.scala 61:14]
    io.tx_wstrb <= r3 @[memory.scala 62:15]
    io.test_passed <= passed_reg @[memory.scala 63:18]
    node _T_9 = neq(io.dmem.request.bits.address, UInt<29>("h010000000")) @[memory.scala 64:20]
    when _T_9 : @[memory.scala 64:38]
      r3 <= UInt<1>("h00") @[memory.scala 65:8]
      skip @[memory.scala 64:38]
    when io.dmem.request.valid : @[memory.scala 67:32]
      node _T_10 = neq(io.dmem.request.bits.operation, UInt<1>("h01")) @[memory.scala 72:31]
      node _T_11 = asUInt(reset) @[memory.scala 72:12]
      node _T_12 = or(_T_10, _T_11) @[memory.scala 72:12]
      node _T_13 = eq(_T_12, UInt<1>("h00")) @[memory.scala 72:12]
      when _T_13 : @[memory.scala 72:12]
        printf(clock, UInt<1>(1), "Assertion failed\n    at memory.scala:72 assert (request.operation =/= Write)\n") @[memory.scala 72:12]
        stop(clock, UInt<1>(1), 1) @[memory.scala 72:12]
        skip @[memory.scala 72:12]
      node _T_14 = eq(io.dmem.request.bits.operation, UInt<1>("h00")) @[memory.scala 77:30]
      node _T_15 = eq(io.dmem.request.bits.address, UInt<30>("h020000008")) @[memory.scala 77:53]
      node _T_16 = and(_T_14, _T_15) @[memory.scala 77:39]
      when _T_16 : @[memory.scala 77:71]
        node _T_17 = asUInt(reset) @[memory.scala 78:13]
        node _T_18 = eq(_T_17, UInt<1>("h00")) @[memory.scala 78:13]
        when _T_18 : @[memory.scala 78:13]
          printf(clock, UInt<1>(1), "read path as well operation \n") @[memory.scala 78:13]
          skip @[memory.scala 78:13]
        skip @[memory.scala 77:71]
      node _T_19 = eq(io.dmem.request.bits.address, UInt<30>("h020000000")) @[memory.scala 82:23]
      when _T_19 : @[memory.scala 82:41]
        io.dmem.response.bits.data <= io.rx_data @[memory.scala 83:34]
        skip @[memory.scala 82:41]
      else : @[memory.scala 85:47]
        node _T_20 = eq(io.dmem.request.bits.address, UInt<30>("h020000004")) @[memory.scala 85:29]
        when _T_20 : @[memory.scala 85:47]
          io.dmem.response.bits.data <= io.rx_rstrb @[memory.scala 86:34]
          skip @[memory.scala 85:47]
        else : @[memory.scala 87:17]
          node _T_21 = shr(io.dmem.request.bits.address, 2) @[memory.scala 88:60]
          node _T_22 = bits(_T_21, 17, 0) @[memory.scala 88:48]
          read mport _T_23 = memory[_T_22], clock @[memory.scala 88:48]
          io.dmem.response.bits.data <= _T_23 @[memory.scala 88:34]
          skip @[memory.scala 87:17]
      io.dmem.response.valid <= UInt<1>("h01") @[memory.scala 90:28]
      node _T_24 = eq(io.dmem.request.bits.operation, UInt<2>("h02")) @[memory.scala 93:29]
      when _T_24 : @[memory.scala 93:44]
        node _T_25 = eq(io.dmem.request.bits.address, UInt<30>("h020000008")) @[memory.scala 94:24]
        when _T_25 : @[memory.scala 94:42]
          node _T_26 = asUInt(reset) @[memory.scala 95:15]
          node _T_27 = eq(_T_26, UInt<1>("h00")) @[memory.scala 95:15]
          when _T_27 : @[memory.scala 95:15]
            printf(clock, UInt<1>(1), "write to address 200008 %d\n", io.dmem.request.bits.writedata) @[memory.scala 95:15]
            skip @[memory.scala 95:15]
          skip @[memory.scala 94:42]
        else : @[memory.scala 96:47]
          node _T_28 = eq(io.dmem.request.bits.address, UInt<30>("h020000010")) @[memory.scala 96:29]
          when _T_28 : @[memory.scala 96:47]
            r1 <= io.dmem.request.bits.writedata @[memory.scala 97:12]
            skip @[memory.scala 96:47]
          else : @[memory.scala 98:49]
            node _T_29 = eq(io.dmem.request.bits.address, UInt<29>("h010000000")) @[memory.scala 98:31]
            when _T_29 : @[memory.scala 98:49]
              node _T_30 = asUInt(reset) @[memory.scala 99:15]
              node _T_31 = eq(_T_30, UInt<1>("h00")) @[memory.scala 99:15]
              when _T_31 : @[memory.scala 99:15]
                printf(clock, UInt<1>(1), "write to address tx_data 10000 %d\n", io.dmem.request.bits.writedata) @[memory.scala 99:15]
                skip @[memory.scala 99:15]
              r2 <= io.dmem.request.bits.writedata @[memory.scala 100:12]
              r3 <= UInt<1>("h01") @[memory.scala 101:11]
              skip @[memory.scala 98:49]
            else : @[memory.scala 102:77]
              node _T_32 = eq(io.dmem.request.bits.address, UInt<30>("h030000000")) @[memory.scala 102:31]
              node _T_33 = eq(io.dmem.request.bits.writedata, UInt<16>("h0ddd5")) @[memory.scala 102:64]
              node _T_34 = and(_T_32, _T_33) @[memory.scala 102:48]
              when _T_34 : @[memory.scala 102:77]
                passed_reg <= UInt<1>("h01") @[memory.scala 103:20]
                node _T_35 = asUInt(reset) @[memory.scala 104:15]
                node _T_36 = eq(_T_35, UInt<1>("h00")) @[memory.scala 104:15]
                when _T_36 : @[memory.scala 104:15]
                  printf(clock, UInt<1>(1), "test passed*************** %d\n", io.test_passed) @[memory.scala 104:15]
                  skip @[memory.scala 104:15]
                skip @[memory.scala 102:77]
              else : @[memory.scala 105:19]
                node _T_37 = shr(io.dmem.request.bits.address, 2) @[memory.scala 106:27]
                node _T_38 = bits(_T_37, 17, 0) @[memory.scala 106:15]
                infer mport _T_39 = memory[_T_38], clock @[memory.scala 106:15]
                _T_39 <= io.dmem.request.bits.writedata @[memory.scala 106:33]
                skip @[memory.scala 105:19]
        skip @[memory.scala 93:44]
      skip @[memory.scala 67:32]
    else : @[memory.scala 113:16]
      io.dmem.response.valid <= UInt<1>("h00") @[memory.scala 114:28]
      skip @[memory.scala 113:16]
    
  module ICombinMemPort : 
    input clock : Clock
    input reset : Reset
    output io : {pipeline : {flip address : UInt<32>, flip valid : UInt<1>, good : UInt<1>, instruction : UInt<32>, ready : UInt<1>}, flip bus : {flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}}, response : {valid : UInt<1>, bits : {data : UInt<32>}}}}
    
    wire _T : {flip address : UInt<32>, flip valid : UInt<1>, good : UInt<1>, instruction : UInt<32>, ready : UInt<1>} @[base-memory-components.scala 65:31]
    _T.ready <= UInt<1>("h00") @[base-memory-components.scala 65:31]
    _T.instruction <= UInt<32>("h00") @[base-memory-components.scala 65:31]
    _T.good <= UInt<1>("h00") @[base-memory-components.scala 65:31]
    _T.valid <= UInt<1>("h00") @[base-memory-components.scala 65:31]
    _T.address <= UInt<32>("h00") @[base-memory-components.scala 65:31]
    io.pipeline.ready <= _T.ready @[base-memory-components.scala 65:15]
    io.pipeline.instruction <= _T.instruction @[base-memory-components.scala 65:15]
    io.pipeline.good <= _T.good @[base-memory-components.scala 65:15]
    _T.valid <= io.pipeline.valid @[base-memory-components.scala 65:15]
    _T.address <= io.pipeline.address @[base-memory-components.scala 65:15]
    io.bus.response.bits.data is invalid @[base-memory-components.scala 70:15]
    io.bus.response.valid is invalid @[base-memory-components.scala 70:15]
    io.bus.request.bits.operation is invalid @[base-memory-components.scala 70:15]
    io.bus.request.bits.writedata is invalid @[base-memory-components.scala 70:15]
    io.bus.request.bits.address is invalid @[base-memory-components.scala 70:15]
    io.bus.request.valid is invalid @[base-memory-components.scala 70:15]
    io.bus.request.ready is invalid @[base-memory-components.scala 70:15]
    when io.pipeline.valid : @[memory-combin-ports.scala 15:28]
      wire _T_1 : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>} @[memory-combin-ports.scala 16:23]
      _T_1.address <= io.pipeline.address @[memory-combin-ports.scala 17:23]
      _T_1.operation <= UInt<1>("h00") @[memory-combin-ports.scala 18:23]
      _T_1.writedata <= UInt<1>("h00") @[memory-combin-ports.scala 19:23]
      io.bus.request.bits.operation <= _T_1.operation @[memory-combin-ports.scala 21:26]
      io.bus.request.bits.writedata <= _T_1.writedata @[memory-combin-ports.scala 21:26]
      io.bus.request.bits.address <= _T_1.address @[memory-combin-ports.scala 21:26]
      io.bus.request.valid <= UInt<1>("h01") @[memory-combin-ports.scala 22:26]
      skip @[memory-combin-ports.scala 15:28]
    else : @[memory-combin-ports.scala 23:16]
      io.bus.request.valid <= UInt<1>("h00") @[memory-combin-ports.scala 24:26]
      skip @[memory-combin-ports.scala 23:16]
    io.pipeline.ready <= UInt<1>("h01") @[memory-combin-ports.scala 28:21]
    io.pipeline.good <= UInt<1>("h01") @[memory-combin-ports.scala 31:20]
    io.pipeline.instruction <= io.bus.response.bits.data @[memory-combin-ports.scala 32:27]
    
  module DCombinMemPort : 
    input clock : Clock
    input reset : Reset
    output io : {pipeline : {flip address : UInt<32>, flip valid : UInt<1>, good : UInt<1>, flip writedata : UInt<32>, flip memread : UInt<1>, flip memwrite : UInt<1>, flip maskmode : UInt<2>, flip sext : UInt<1>, readdata : UInt<32>}, flip bus : {flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {address : UInt<32>, writedata : UInt<32>, operation : UInt<2>}}, response : {valid : UInt<1>, bits : {data : UInt<32>}}}}
    
    wire _T : {flip address : UInt<32>, flip valid : UInt<1>, good : UInt<1>, flip writedata : UInt<32>, flip memread : UInt<1>, flip memwrite : UInt<1>, flip maskmode : UInt<2>, flip sext : UInt<1>, readdata : UInt<32>} @[base-memory-components.scala 82:31]
    _T.readdata <= UInt<32>("h00") @[base-memory-components.scala 82:31]
    _T.sext <= UInt<1>("h00") @[base-memory-components.scala 82:31]
    _T.maskmode <= UInt<2>("h00") @[base-memory-components.scala 82:31]
    _T.memwrite <= UInt<1>("h00") @[base-memory-components.scala 82:31]
    _T.memread <= UInt<1>("h00") @[base-memory-components.scala 82:31]
    _T.writedata <= UInt<32>("h00") @[base-memory-components.scala 82:31]
    _T.good <= UInt<1>("h00") @[base-memory-components.scala 82:31]
    _T.valid <= UInt<1>("h00") @[base-memory-components.scala 82:31]
    _T.address <= UInt<32>("h00") @[base-memory-components.scala 82:31]
    io.pipeline.readdata <= _T.readdata @[base-memory-components.scala 82:15]
    _T.sext <= io.pipeline.sext @[base-memory-components.scala 82:15]
    _T.maskmode <= io.pipeline.maskmode @[base-memory-components.scala 82:15]
    _T.memwrite <= io.pipeline.memwrite @[base-memory-components.scala 82:15]
    _T.memread <= io.pipeline.memread @[base-memory-components.scala 82:15]
    _T.writedata <= io.pipeline.writedata @[base-memory-components.scala 82:15]
    io.pipeline.good <= _T.good @[base-memory-components.scala 82:15]
    _T.valid <= io.pipeline.valid @[base-memory-components.scala 82:15]
    _T.address <= io.pipeline.address @[base-memory-components.scala 82:15]
    io.bus.response.bits.data is invalid @[base-memory-components.scala 87:15]
    io.bus.response.valid is invalid @[base-memory-components.scala 87:15]
    io.bus.request.bits.operation is invalid @[base-memory-components.scala 87:15]
    io.bus.request.bits.writedata is invalid @[base-memory-components.scala 87:15]
    io.bus.request.bits.address is invalid @[base-memory-components.scala 87:15]
    io.bus.request.valid is invalid @[base-memory-components.scala 87:15]
    io.bus.request.ready is invalid @[base-memory-components.scala 87:15]
    io.pipeline.good <= io.bus.response.valid @[base-memory-components.scala 89:20]
    io.pipeline.good <= UInt<1>("h01") @[memory-combin-ports.scala 41:20]
    node _T_1 = or(io.pipeline.memread, io.pipeline.memwrite) @[memory-combin-ports.scala 43:51]
    node _T_2 = and(io.pipeline.valid, _T_1) @[memory-combin-ports.scala 43:27]
    when _T_2 : @[memory-combin-ports.scala 43:77]
      node _T_3 = and(io.pipeline.memread, io.pipeline.memwrite) @[memory-combin-ports.scala 45:34]
      node _T_4 = eq(_T_3, UInt<1>("h00")) @[memory-combin-ports.scala 45:12]
      node _T_5 = asUInt(reset) @[memory-combin-ports.scala 45:11]
      node _T_6 = or(_T_4, _T_5) @[memory-combin-ports.scala 45:11]
      node _T_7 = eq(_T_6, UInt<1>("h00")) @[memory-combin-ports.scala 45:11]
      when _T_7 : @[memory-combin-ports.scala 45:11]
        printf(clock, UInt<1>(1), "Assertion failed\n    at memory-combin-ports.scala:45 assert(!(io.pipeline.memread && io.pipeline.memwrite))\n") @[memory-combin-ports.scala 45:11]
        stop(clock, UInt<1>(1), 1) @[memory-combin-ports.scala 45:11]
        skip @[memory-combin-ports.scala 45:11]
      io.bus.request.bits.address <= io.pipeline.address @[memory-combin-ports.scala 47:33]
      io.bus.request.valid <= UInt<1>("h01") @[memory-combin-ports.scala 48:26]
      when io.pipeline.memwrite : @[memory-combin-ports.scala 50:33]
        io.bus.request.bits.operation <= UInt<2>("h02") @[memory-combin-ports.scala 59:37]
        skip @[memory-combin-ports.scala 50:33]
      else : @[memory-combin-ports.scala 60:18]
        io.bus.request.bits.operation <= UInt<1>("h00") @[memory-combin-ports.scala 62:37]
        skip @[memory-combin-ports.scala 60:18]
      skip @[memory-combin-ports.scala 43:77]
    else : @[memory-combin-ports.scala 64:16]
      io.bus.request.valid <= UInt<1>("h00") @[memory-combin-ports.scala 66:26]
      skip @[memory-combin-ports.scala 64:16]
    when io.bus.response.valid : @[memory-combin-ports.scala 70:32]
      when io.pipeline.memwrite : @[memory-combin-ports.scala 71:33]
        wire _T_8 : UInt<32> @[memory-combin-ports.scala 73:28]
        node _T_9 = neq(io.pipeline.maskmode, UInt<2>("h02")) @[memory-combin-ports.scala 76:34]
        when _T_9 : @[memory-combin-ports.scala 76:43]
          node _T_10 = bits(io.pipeline.address, 1, 0) @[memory-combin-ports.scala 78:42]
          wire _T_11 : UInt<32> @[memory-combin-ports.scala 79:29]
          _T_11 <= io.bus.response.bits.data @[memory-combin-ports.scala 81:18]
          node _T_12 = eq(io.pipeline.maskmode, UInt<1>("h00")) @[memory-combin-ports.scala 84:36]
          when _T_12 : @[memory-combin-ports.scala 84:45]
            node _T_13 = eq(_T_10, UInt<1>("h00")) @[memory-combin-ports.scala 85:23]
            when _T_13 : @[memory-combin-ports.scala 85:32]
              node _T_14 = bits(_T_11, 31, 8) @[memory-combin-ports.scala 86:38]
              node _T_15 = bits(io.pipeline.writedata, 7, 0) @[memory-combin-ports.scala 86:67]
              node _T_16 = cat(_T_14, _T_15) @[Cat.scala 29:58]
              _T_8 <= _T_16 @[memory-combin-ports.scala 86:23]
              skip @[memory-combin-ports.scala 85:32]
            else : @[memory-combin-ports.scala 87:38]
              node _T_17 = eq(_T_10, UInt<1>("h01")) @[memory-combin-ports.scala 87:29]
              when _T_17 : @[memory-combin-ports.scala 87:38]
                node _T_18 = bits(_T_11, 31, 16) @[memory-combin-ports.scala 88:38]
                node _T_19 = bits(io.pipeline.writedata, 15, 8) @[memory-combin-ports.scala 88:72]
                node _T_20 = bits(_T_11, 7, 0) @[memory-combin-ports.scala 88:88]
                node _T_21 = cat(_T_19, _T_20) @[Cat.scala 29:58]
                node _T_22 = cat(_T_18, _T_21) @[Cat.scala 29:58]
                _T_8 <= _T_22 @[memory-combin-ports.scala 88:23]
                skip @[memory-combin-ports.scala 87:38]
              else : @[memory-combin-ports.scala 89:38]
                node _T_23 = eq(_T_10, UInt<2>("h02")) @[memory-combin-ports.scala 89:29]
                when _T_23 : @[memory-combin-ports.scala 89:38]
                  node _T_24 = bits(_T_11, 31, 24) @[memory-combin-ports.scala 90:38]
                  node _T_25 = bits(io.pipeline.writedata, 23, 16) @[memory-combin-ports.scala 90:72]
                  node _T_26 = bits(_T_11, 15, 0) @[memory-combin-ports.scala 90:88]
                  node _T_27 = cat(_T_25, _T_26) @[Cat.scala 29:58]
                  node _T_28 = cat(_T_24, _T_27) @[Cat.scala 29:58]
                  _T_8 <= _T_28 @[memory-combin-ports.scala 90:23]
                  skip @[memory-combin-ports.scala 89:38]
                else : @[memory-combin-ports.scala 91:23]
                  node _T_29 = bits(io.pipeline.writedata, 31, 24) @[memory-combin-ports.scala 92:51]
                  node _T_30 = bits(_T_11, 23, 0) @[memory-combin-ports.scala 92:68]
                  node _T_31 = cat(_T_29, _T_30) @[Cat.scala 29:58]
                  _T_8 <= _T_31 @[memory-combin-ports.scala 92:23]
                  skip @[memory-combin-ports.scala 91:23]
            skip @[memory-combin-ports.scala 84:45]
          else : @[memory-combin-ports.scala 94:22]
            node _T_32 = eq(_T_10, UInt<1>("h00")) @[memory-combin-ports.scala 95:24]
            when _T_32 : @[memory-combin-ports.scala 95:33]
              node _T_33 = bits(_T_11, 31, 16) @[memory-combin-ports.scala 96:38]
              node _T_34 = bits(io.pipeline.writedata, 15, 0) @[memory-combin-ports.scala 96:67]
              node _T_35 = cat(_T_33, _T_34) @[Cat.scala 29:58]
              _T_8 <= _T_35 @[memory-combin-ports.scala 96:23]
              skip @[memory-combin-ports.scala 95:33]
            else : @[memory-combin-ports.scala 97:23]
              node _T_36 = bits(io.pipeline.writedata, 31, 16) @[memory-combin-ports.scala 98:51]
              node _T_37 = bits(_T_11, 15, 0) @[memory-combin-ports.scala 98:68]
              node _T_38 = cat(_T_36, _T_37) @[Cat.scala 29:58]
              _T_8 <= _T_38 @[memory-combin-ports.scala 98:23]
              skip @[memory-combin-ports.scala 97:23]
            skip @[memory-combin-ports.scala 94:22]
          skip @[memory-combin-ports.scala 76:43]
        else : @[memory-combin-ports.scala 101:20]
          _T_8 <= io.pipeline.writedata @[memory-combin-ports.scala 103:19]
          skip @[memory-combin-ports.scala 101:20]
        io.bus.request.bits.writedata <= _T_8 @[memory-combin-ports.scala 106:37]
        skip @[memory-combin-ports.scala 71:33]
      else : @[memory-combin-ports.scala 107:39]
        when io.pipeline.memread : @[memory-combin-ports.scala 107:39]
          wire _T_39 : UInt<32> @[memory-combin-ports.scala 109:36]
          wire _T_40 : UInt<32> @[memory-combin-ports.scala 110:36]
          node _T_41 = bits(io.pipeline.address, 1, 0) @[memory-combin-ports.scala 112:39]
          node _T_42 = eq(io.pipeline.maskmode, UInt<1>("h00")) @[memory-combin-ports.scala 113:34]
          when _T_42 : @[memory-combin-ports.scala 113:43]
            node _T_43 = mul(_T_41, UInt<4>("h08")) @[memory-combin-ports.scala 115:64]
            node _T_44 = dshr(io.bus.response.bits.data, _T_43) @[memory-combin-ports.scala 115:53]
            node _T_45 = and(_T_44, UInt<8>("h0ff")) @[memory-combin-ports.scala 115:72]
            _T_39 <= _T_45 @[memory-combin-ports.scala 115:23]
            skip @[memory-combin-ports.scala 113:43]
          else : @[memory-combin-ports.scala 116:50]
            node _T_46 = eq(io.pipeline.maskmode, UInt<1>("h01")) @[memory-combin-ports.scala 116:41]
            when _T_46 : @[memory-combin-ports.scala 116:50]
              node _T_47 = mul(_T_41, UInt<4>("h08")) @[memory-combin-ports.scala 118:64]
              node _T_48 = dshr(io.bus.response.bits.data, _T_47) @[memory-combin-ports.scala 118:53]
              node _T_49 = and(_T_48, UInt<16>("h0ffff")) @[memory-combin-ports.scala 118:72]
              _T_39 <= _T_49 @[memory-combin-ports.scala 118:23]
              skip @[memory-combin-ports.scala 116:50]
            else : @[memory-combin-ports.scala 119:20]
              _T_39 <= io.bus.response.bits.data @[memory-combin-ports.scala 120:23]
              skip @[memory-combin-ports.scala 119:20]
          when io.pipeline.sext : @[memory-combin-ports.scala 123:31]
            node _T_50 = eq(io.pipeline.maskmode, UInt<1>("h00")) @[memory-combin-ports.scala 124:36]
            when _T_50 : @[memory-combin-ports.scala 124:45]
              node _T_51 = bits(_T_39, 7, 7) @[memory-combin-ports.scala 126:59]
              node _T_52 = bits(_T_51, 0, 0) @[Bitwise.scala 72:15]
              node _T_53 = mux(_T_52, UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
              node _T_54 = bits(_T_39, 7, 0) @[memory-combin-ports.scala 126:79]
              node _T_55 = cat(_T_53, _T_54) @[Cat.scala 29:58]
              _T_40 <= _T_55 @[memory-combin-ports.scala 126:30]
              skip @[memory-combin-ports.scala 124:45]
            else : @[memory-combin-ports.scala 127:52]
              node _T_56 = eq(io.pipeline.maskmode, UInt<1>("h01")) @[memory-combin-ports.scala 127:43]
              when _T_56 : @[memory-combin-ports.scala 127:52]
                node _T_57 = bits(_T_39, 15, 15) @[memory-combin-ports.scala 129:59]
                node _T_58 = bits(_T_57, 0, 0) @[Bitwise.scala 72:15]
                node _T_59 = mux(_T_58, UInt<16>("h0ffff"), UInt<16>("h00")) @[Bitwise.scala 72:12]
                node _T_60 = bits(_T_39, 15, 0) @[memory-combin-ports.scala 129:79]
                node _T_61 = cat(_T_59, _T_60) @[Cat.scala 29:58]
                _T_40 <= _T_61 @[memory-combin-ports.scala 129:30]
                skip @[memory-combin-ports.scala 127:52]
              else : @[memory-combin-ports.scala 130:22]
                _T_40 <= _T_39 @[memory-combin-ports.scala 132:30]
                skip @[memory-combin-ports.scala 130:22]
            skip @[memory-combin-ports.scala 123:31]
          else : @[memory-combin-ports.scala 134:20]
            _T_40 <= _T_39 @[memory-combin-ports.scala 135:28]
            skip @[memory-combin-ports.scala 134:20]
          io.pipeline.readdata <= _T_40 @[memory-combin-ports.scala 138:28]
          skip @[memory-combin-ports.scala 107:39]
      skip @[memory-combin-ports.scala 70:32]
    
  module Tile : 
    input clock : Clock
    input reset : UInt<1>
    output io : {success : UInt<1>, addr : UInt<32>, flip rx_data : UInt<32>, flip rx_rstrb : UInt<1>, rx_data_done : UInt<1>, tx_data : UInt<32>, tx_wstrb : UInt<1>, test_passed : UInt<1>}
    
    io.success is invalid @[Tile.scala 19:14]
    inst cpu of CPU @[Tile.scala 22:20]
    cpu.clock <= clock
    cpu.reset <= reset
    inst mem of DualPortedCombinMemory @[Tile.scala 23:20]
    mem.clock <= clock
    mem.reset <= reset
    inst imem of ICombinMemPort @[Tile.scala 25:20]
    imem.clock <= clock
    imem.reset <= reset
    inst dmem of DCombinMemPort @[Tile.scala 26:20]
    dmem.clock <= clock
    dmem.reset <= reset
    io.addr <= dmem.io.pipeline.address @[Tile.scala 28:11]
    io.test_passed <= mem.io.test_passed @[Tile.scala 29:18]
    mem.io.rx_data <= io.rx_data @[Tile.scala 32:18]
    mem.io.rx_rstrb <= io.rx_rstrb @[Tile.scala 33:19]
    io.rx_data_done <= mem.io.rx_data_done @[Tile.scala 34:19]
    io.tx_data <= mem.io.tx_data @[Tile.scala 36:14]
    io.tx_wstrb <= mem.io.tx_wstrb @[Tile.scala 37:14]
    mem.io.imem.request.bits.operation <= imem.io.bus.request.bits.operation @[base-memory-components.scala 15:26]
    mem.io.imem.request.bits.writedata <= imem.io.bus.request.bits.writedata @[base-memory-components.scala 15:26]
    mem.io.imem.request.bits.address <= imem.io.bus.request.bits.address @[base-memory-components.scala 15:26]
    mem.io.imem.request.valid <= imem.io.bus.request.valid @[base-memory-components.scala 15:26]
    imem.io.bus.request.ready <= mem.io.imem.request.ready @[base-memory-components.scala 15:26]
    imem.io.bus.response.bits.data <= mem.io.imem.response.bits.data @[base-memory-components.scala 16:26]
    imem.io.bus.response.valid <= mem.io.imem.response.valid @[base-memory-components.scala 16:26]
    mem.io.dmem.request.bits.operation <= dmem.io.bus.request.bits.operation @[base-memory-components.scala 18:26]
    mem.io.dmem.request.bits.writedata <= dmem.io.bus.request.bits.writedata @[base-memory-components.scala 18:26]
    mem.io.dmem.request.bits.address <= dmem.io.bus.request.bits.address @[base-memory-components.scala 18:26]
    mem.io.dmem.request.valid <= dmem.io.bus.request.valid @[base-memory-components.scala 18:26]
    dmem.io.bus.request.ready <= mem.io.dmem.request.ready @[base-memory-components.scala 18:26]
    dmem.io.bus.response.bits.data <= mem.io.dmem.response.bits.data @[base-memory-components.scala 19:26]
    dmem.io.bus.response.valid <= mem.io.dmem.response.valid @[base-memory-components.scala 19:26]
    cpu.io.imem.ready <= imem.io.pipeline.ready @[Tile.scala 40:15]
    cpu.io.imem.instruction <= imem.io.pipeline.instruction @[Tile.scala 40:15]
    cpu.io.imem.good <= imem.io.pipeline.good @[Tile.scala 40:15]
    imem.io.pipeline.valid <= cpu.io.imem.valid @[Tile.scala 40:15]
    imem.io.pipeline.address <= cpu.io.imem.address @[Tile.scala 40:15]
    cpu.io.dmem.readdata <= dmem.io.pipeline.readdata @[Tile.scala 41:15]
    dmem.io.pipeline.sext <= cpu.io.dmem.sext @[Tile.scala 41:15]
    dmem.io.pipeline.maskmode <= cpu.io.dmem.maskmode @[Tile.scala 41:15]
    dmem.io.pipeline.memwrite <= cpu.io.dmem.memwrite @[Tile.scala 41:15]
    dmem.io.pipeline.memread <= cpu.io.dmem.memread @[Tile.scala 41:15]
    dmem.io.pipeline.writedata <= cpu.io.dmem.writedata @[Tile.scala 41:15]
    cpu.io.dmem.good <= dmem.io.pipeline.good @[Tile.scala 41:15]
    dmem.io.pipeline.valid <= cpu.io.dmem.valid @[Tile.scala 41:15]
    dmem.io.pipeline.address <= cpu.io.dmem.address @[Tile.scala 41:15]
    
